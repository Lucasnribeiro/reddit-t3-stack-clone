generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String        @id @default(cuid())
  name              String?
  email             String?       @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
  admiministrates   Admin[]
  moderates         Moderator[]
  subreddits        Subreddit[]
  upvotes           Upvote[] 
  downvotes         Downvote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())
  userId           String
  title            String
  content          String     @db.Text()
  user             User       @relation(fields: [userId], references: [id])
  comments         Comment[]
  upvotes          Upvote[]   @relation("PostUpvotes")
  downvotes        Downvote[] @relation("PostDownvotes")
}

model Comment {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())
  userId           String
  content          String     @db.Text()
  postId           String
  post             Post       @relation(fields: [postId], references: [id])
  user             User       @relation(fields: [userId], references: [id])
  upvotes          Upvote[]   @relation("CommentUpvotes")
  downvotes        Downvote[] @relation("CommentDownvotes")
}

model Upvote {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  userId           String
  postId           String
  commentId        String?
  post             Post?    @relation(name: "PostUpvotes", fields: [postId], references: [id])
  comment          Comment? @relation(name: "CommentUpvotes", fields: [commentId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Downvote {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  userId           String
  postId           String
  commentId        String?
  post             Post?    @relation(name: "PostDownvotes", fields: [postId], references: [id])
  comment          Comment? @relation(name: "CommentDownvotes", fields: [commentId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Admin {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  userId        String
  subredditId   String
  user          User      @relation(fields: [userId], references: [id])
  subreddit     Subreddit @relation(fields: [subredditId], references: [id])
}

model Moderator {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  userId        String
  subredditId   String
  user          User      @relation(fields: [userId], references: [id])
  subreddit     Subreddit @relation(fields: [subredditId], references: [id])
}

model Subreddit {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  title        String
  admins       Admin[]
  moderators   Moderator[]
  ownerId      String
  user         User        @relation(fields: [ownerId], references: [id])
}
